package com.blacktiger.bookplay.ui

import android.graphics.Bitmap
import android.graphics.pdf.PdfRenderer
import android.net.Uri
import android.os.Bundle
import android.os.ParcelFileDescriptor
import android.speech.tts.TextToSpeech
import android.speech.tts.UtteranceProgressListener
import android.widget.Button
import android.widget.ImageView
import androidx.appcompat.app.AppCompatActivity
import com.blacktiger.bookplay.R
import com.blacktiger.bookplay.util.OnSwipeTouchListener
import java.io.IOException
import java.util.Locale
import android.content.Context
import android.util.Log
import android.widget.TextView
import android.widget.Toast
import androidx.lifecycle.lifecycleScope
import com.blacktiger.bookplay.data.BookDatabase
import com.tom_roush.pdfbox.pdmodel.PDDocument
import com.tom_roush.pdfbox.text.PDFTextStripper
import kotlinx.coroutines.launch


class PdfReaderActivity : AppCompatActivity() {

    private lateinit var pageIndicator: TextView
    private lateinit var pdfRenderer: PdfRenderer
    private var currentPage: PdfRenderer.Page? = null
    private lateinit var parcelFileDescriptor: ParcelFileDescriptor
    private lateinit var imageView: ImageView

    private var bookUri: Uri? = null
    private var currentPageIndex = 0

    // TTS Í¥ÄÎ†®
    private lateinit var tts: TextToSpeech
    private var paragraphs: List<String> = listOf()
    private var paragraphIndex = 0
    private var isReading = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_pdf_reader)

        imageView = findViewById(R.id.pdfImageView)
        bookUri = intent.getStringExtra("bookUri")?.let { Uri.parse(it) }
        currentPageIndex = intent.getIntExtra("bookProgress", 0)  // ‚Üê Ï∂îÍ∞Ä
        Log.d("PdfReader", "üîÑ Î≥µÏõêÌï† ÌéòÏù¥ÏßÄ: $currentPageIndex")

        if (bookUri == null) {
            finish() // ÏûòÎ™ªÎêú Ï†ëÍ∑ºÏùº Í≤ΩÏö∞ Ï¢ÖÎ£å
            return
        }

        pageIndicator = findViewById(R.id.pageIndicator)

        openRenderer()
        showPage(currentPageIndex)

        imageView.setOnTouchListener(object : OnSwipeTouchListener(this@PdfReaderActivity) {
            override fun onSwipeLeft() {
                showPage(currentPageIndex + 1)
            }

            override fun onSwipeRight() {
                showPage(currentPageIndex - 1)
            }
        })

        tts = TextToSpeech(this) { status ->
            if (status == TextToSpeech.SUCCESS) {
                tts.language = Locale.KOREAN
                setupTtsListener()
            }
        }

        findViewById<Button>(R.id.playTtsBtn).setOnClickListener {
            val text = extractTextFromPdf(this, bookUri!!, currentPageIndex)
            startParagraphTts(text)
        }

        findViewById<Button>(R.id.stopTtsBtn).setOnClickListener {
            stopTts()
        }
    }

    private fun setupTtsListener() {
        tts.setOnUtteranceProgressListener(object : UtteranceProgressListener() {
            override fun onStart(utteranceId: String?) {}
            override fun onError(utteranceId: String?) {}

            override fun onDone(utteranceId: String?) {
                paragraphIndex++
                runOnUiThread {
                    speakNextParagraph()
                }
            }
        })
    }

    private fun startParagraphTts(text: String) {
        // Ï§Ñ Îã®ÏúÑÎ°ú ÏûêÎ•¥Í≥† Ïù¥Ïñ¥Î∂ôÏù¥Í∏∞
        val rawLines = text.lines().map { it.trim() }.filter { it.isNotEmpty() }

        val paragraphBuilder = StringBuilder()
        val refinedParagraphs = mutableListOf<String>()

        for (line in rawLines) {
            paragraphBuilder.append(line)

            // Î¨∏Ïû• Ï¢ÖÎ£å Î∂ÄÌò∏Î°ú Î¨∏Îã® Ï¢ÖÎ£å Ï∂îÏ†ï
            if (line.endsWith(".") || line.endsWith("!") || line.endsWith("?") || paragraphBuilder.length > 300) {
                refinedParagraphs.add(paragraphBuilder.toString().trim())
                paragraphBuilder.clear()
            } else {
                paragraphBuilder.append(" ")  // Ï§Ñ Í∞Ñ Ïó∞Í≤∞
            }
        }

        // ÎßàÏßÄÎßâ ÎÇ®ÏùÄ Ï§Ñ Ï≤òÎ¶¨
        if (paragraphBuilder.isNotBlank()) {
            refinedParagraphs.add(paragraphBuilder.toString().trim())
        }

        paragraphs = refinedParagraphs
        paragraphIndex = 0
        isReading = true
        speakNextParagraph()
    }


    private fun speakNextParagraph() {
        if (!isReading) return

        if (paragraphIndex < paragraphs.size) {
            val paragraph = paragraphs[paragraphIndex]
            tts.speak(paragraph, TextToSpeech.QUEUE_FLUSH, null, "paragraph_$paragraphIndex")
        } else {
            // Î™®Îì† Î¨∏Îã® ÎÇ≠ÎèÖ ÏôÑÎ£å Ïãú Îã§Ïùå ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
            if (currentPageIndex < pdfRenderer.pageCount - 1) {
                currentPageIndex++
                showPage(currentPageIndex)

                // Îã§Ïùå ÌéòÏù¥ÏßÄ ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú Î∞è ÎÇ≠ÎèÖ Ïû¨ÏãúÏûë
                val nextText = extractTextFromPdf(this, bookUri!!, currentPageIndex)
                startParagraphTts(nextText)
            } else {
                // ÎßàÏßÄÎßâ ÌéòÏù¥ÏßÄÍπåÏßÄ ÏôÑÎ£å ‚Üí ÎÇ≠ÎèÖ Ï¢ÖÎ£å
                isReading = false
                runOnUiThread {
                    Toast.makeText(this, "Î™®Îì† ÌéòÏù¥ÏßÄ ÎÇ≠ÎèÖÏùÑ ÏôÑÎ£åÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    private fun stopTts() {
        isReading = false
        if (tts.isSpeaking) tts.stop()
    }

    private fun openRenderer() {
        try {
            val fd = contentResolver.openFileDescriptor(bookUri!!, "r")
            parcelFileDescriptor = fd!!
            pdfRenderer = PdfRenderer(parcelFileDescriptor)
        } catch (e: IOException) {
            e.printStackTrace()
            finish()
        }
    }

    private fun showPage(index: Int) {
        if (index < 0 || index >= pdfRenderer.pageCount) return

        Log.d("PdfReader", "üìò ÌéòÏù¥ÏßÄ ÌëúÏãú: $index")

        currentPage.closeIfInitialized()
        currentPageIndex = index
        currentPage = pdfRenderer.openPage(index)

        val bitmap = Bitmap.createBitmap(
            currentPage!!.width, currentPage!!.height, Bitmap.Config.ARGB_8888
        )
        currentPage!!.render(bitmap, null, null, PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY)

        imageView.setImageBitmap(bitmap)

        // ÌéòÏù¥ÏßÄ Ïàò ÌëúÏãú
        pageIndicator.text = "${index + 1} / ${pdfRenderer.pageCount}"

        // Ï±Ö progress Ï†ÄÏû• (ÏΩîÎ£®Ìã¥ ÏÇ¨Ïö©)
        lifecycleScope.launch {
            Log.d("PdfReader", "üíæ Ï†ÄÏû• Ï§ë: $index ‚Üí ${bookUri.toString()}")

            val uriStr = bookUri.toString()
            val db = BookDatabase.getInstance(applicationContext)
            db.bookDao().updateProgress(uriStr, index)
        }
    }

    override fun onDestroy() {
        super.onDestroy()

        // TTS Ï†ïÎ¶¨
        if (::tts.isInitialized) {
            tts.stop()
            tts.shutdown()
        }

        // PDF Í¥ÄÎ†® Ï†ïÎ¶¨
        currentPage.closeIfInitialized()
        pdfRenderer.close()
        parcelFileDescriptor.close()
    }

    private fun PdfRenderer.Page?.closeIfInitialized() {
        this?.close()
    }

    private fun extractTextFromPdf(context: Context, uri: Uri, pageIndex: Int): String {
        return try {
            val inputStream = context.contentResolver.openInputStream(uri)
            val document = PDDocument.load(inputStream)

            val stripper = PDFTextStripper().apply {
                startPage = pageIndex + 1  // PdfBoxÎäî 1-based Ïù∏Îç±Ïä§ ÏÇ¨Ïö©
                endPage = pageIndex + 1
            }

            val text = stripper.getText(document)
            document.close()
            text
        } catch (e: Exception) {
            e.printStackTrace()
            ""
        }
    }

}
